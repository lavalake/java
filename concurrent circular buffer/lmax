http://mechanitis.blogspot.com/
http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf
unbounded queue
cost of locks
cach friendly
memory barriar
  1. guarantee instruction order. Panelty, compiler and cpu can not optimize instruction order
  2. data consistency. Data before the barriar are guaranteed to be visible to other cpu. Pantlty, this will flush the cache.
  
memory allocation/garbage collection
Why linked list backed solution is not good?
  a. garbage collection will be minized if memory is pre-allocated
  b. friendly to cach stragtegies if allocation is performed in a uniform chunk.
So array data structure is a better.

There is a high cost to calculate the remainder of sequence number. Making ring buffer size to power of 2 will reduce the cost.
False Sharing
  if two variables sit beside each other, head and tail, they are in the same cache line. These two variable is updated by two
  different threads. The every time one thread update head, the cache line of the other thread will invalidated if they run on
  different CPU.
